@using HRworks.Controllers
@using Microsoft.Ajax.Utilities
@model IEnumerable<HRworks.Models.Wpsmodel>
@{
    var molnolist = new List<string>() { "549959 - AUH", "575203 - DXB", "663119 - Al Ain", "Grove - 1115891", "549959 - AUH NON WPS", "575203 - DXB NON WPS", "663119 - Al Ain NON WPS", "Grove - 1115891 NON WPS", null };
    ViewBag.Title = "wpsprint";
    var i = 0;
}
<style type="text/css" media="print">

    th, td {
        padding: 2%
    }

    th, td, tr {
        text-align: center;
        background-color: white;
        color: black;
        border: 1px solid black;
    }
</style>
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.3/jspdf.min.js"></script>
<script src="https://html2canvas.hertzen.com/dist/html2canvas.js"></script>
<script>
    document.onkeydown = function (e) {
        if (event.keyCode === 123) {
            return false;
        }
        if (e.ctrlKey && e.keyCode === 'P'.charCodeAt(0)) {
            $('#foot').hide();
            $('#hide').hide();
            $('#prefr').hide();
            $('#foot').hide();
            $('#search').hide();
            print();
            return false;
        } else {
            $('#foot').hide();
            $('#hide').show();
            $('#prefr').show();
            $('#search').show();
        }

    }
</script>
@*<script src="~/Scripts/html2canvas/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js"></script>
    <script>
        function print() {
            var doc = new jsPDF('p', 'mm');
            html2canvas(document.getElementById('page0')).then(function(canvas) {
                var imgData = canvas.toDataURL(
                    'image/jpeg',1);
                doc.addImage(imgData, 'jpeg', 0, 0, 210,300);
                doc.save('wps.pdf');
            });
            html2canvas(document.getElementById('page1')).then(function(canvas) {
                var imgData = canvas.toDataURL(
                    'image/jpeg',1);
                doc.addImage(imgData, 'jpeg', 0, 0, 210,300);
                doc.save('wps.pdf');
            });
            html2canvas(document.getElementById('page2')).then(function(canvas) {
                var imgData = canvas.toDataURL(
                    'image/jpeg',1);
                doc.addImage(imgData, 'jpeg', 0, 0, 210,300);
                doc.save('wps.pdf');
            });
            html2canvas(document.getElementById('page3')).then(function(canvas) {
                var imgData = canvas.toDataURL(
                    'image/jpeg',1);
                doc.addImage(imgData, 'jpeg', 0, 0, 210,300);
                doc.save('wps.pdf');
            });
        }
    </script>*@
<script>
    function getPDF(a,b){

        var HTML_Width = $(a).width();
        var HTML_Height = $(a).height();
        var top_left_margin = 15;
        var PDF_Width = HTML_Width + (top_left_margin * 2);
        var PDF_Height = (PDF_Width * 1.5) + (top_left_margin * 2) - 9;
        var canvas_image_width = HTML_Width;
        var canvas_image_height = HTML_Height;

        var totalPDFPages = Math.ceil(HTML_Height / PDF_Height) - 1;


        html2canvas($(a)[0], { allowTaint: true }).then(function (canvas) {
            canvas.getContext('2d');

            console.log(canvas.height + "  " + canvas.width);


            var imgData = canvas.toDataURL("image/jpeg", 1.0);
            var pdf = new jsPDF('p', 'pt', [PDF_Width, PDF_Height]);
            pdf.addImage(imgData, 'JPG', top_left_margin, top_left_margin, canvas_image_width, canvas_image_height);


            for (var i = 1; i <= totalPDFPages; i++) {
                pdf.addPage(PDF_Width, PDF_Height);
                pdf.addImage(imgData, 'JPG', top_left_margin, -(PDF_Height * i) + (top_left_margin * 4), canvas_image_width, canvas_image_height);
            }

            pdf.save("wps"+b+".pdf");
        });
    };
</script>
<input type="button" value="print" class="btn btn-default" onclick="print();" />
<input type="button" class="btn btn-default" onclick="window.location.href = '@Url.Action("DownloadExcelwps", "payroles", new { month = ViewBag.month1 })'" value="Export" />
<input type="button" class="btn btn-default" onclick="window.location.href = '@Url.Action("wpssub", "payroles", new { month = ViewBag.month1 })'" value="Wps Summary" />
@foreach (var molno in molnolist)
{
    if (Model.Where(x => x.LabourCard != null && x.LabourCard.establishment == molno && !x.LabourCard.establishment.Contains("NON WPS")).Count() <= 0){
        goto end;
    }
    var srno = 0;
    var classstring = "page" + i;
    var total = 0d;
    var total1 = 0d;
    var total2 = 0d;
    <div class="@classstring" id="@classstring" style=" background-color: white; font-family: Calibri !important; padding: 2% !important; border: 1px white solid!important">
        <div style="text-align: center; text-transform: uppercase; width: 100%">
            company name:- citiscape<br />mol id no:-@molno<br />payroll of the month

            @{
                var payrollsavedForthemonth = Model.First().Payrollsaved.forthemonth;
            }
            @if (payrollsavedForthemonth != null)
            {
                @payrollsavedForthemonth.Value.ToString("MMMM")
            }
        </div>
        <table>
            @if (!molno.IsNullOrWhiteSpace() && molno.Contains("NON WPS"))
            { <tr style="text-transform: uppercase;">
            
                  <th>
                      sr no
                  </th>
                  <th>
                      name of the employee
                  </th>
                  <th>passpory no / emirates id no </th>
                  <th>bank name</th>
                  <th>fab card no(16 digits) or iban for personal account(23 digits)</th>
                  <th>salary amount</th>
                  <th>purpose(salary, bonus, Allowance, overtime, commission, emd of service</th>
              </tr>
    }
    else
    {
<tr style="text-transform: uppercase;">
                    <th rowspan="2">
                        sr no
                    </th>
                    <th rowspan="2">
                        name of the employee
                    </th>
                    <th rowspan="2">
                        work permit no
                    </th>
                    <th rowspan="2">
                        personal no
                    </th>
                    <th rowspan="2">
                        bank name
                    </th>
                    <th rowspan="2">
                        fab card no or iban for personal account
                    </th>
                    <th rowspan="2">
                        no of days absent
                    </th>
                    <th colspan="3">
                        employee's net salary
                    </th>
                </tr>
                <tr>
                    <th>
                        fixed portion
                    </th>
                    <th>
                        variable portion
                    </th>
                    <th>
                        total payment
                    </th>
                </tr>
}
            @foreach (var item in Model.Where(x => x.LabourCard != null && x.LabourCard.establishment == molno && !x.LabourCard.establishment.Contains("NON WPS")))
            {
                <tr>
                    @{
                        srno++;
                    }
                    <td>@srno</td>
                    @if (item.MasterFile != null)
                    {
                        <td>@item.MasterFile.employee_name</td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (item.LabourCard != null)
                    {
                        <td>@item.LabourCard.work_permit_no</td>
                        <td>@item.LabourCard.personal_no</td>
                    }
                    else
                    {
                        <td></td>
                        <td></td>
                    }
                    @if (item.BankDetails != null)
                    {
                        <td>@item.BankDetails.bank_name</td>
                        <td>@item.BankDetails.IBAN</td>
                    }
                    else
                    {
                        <td></td>
                        <td></td>
                    }
                    <td>@item.Payrollsaved.Absents</td>
                    <td>
                        @{
                            int.TryParse(payrolesController.Unprotect(item.Payrollsaved.Gross), out var e);
                            total += e;
                        }
                        @e.ToString("F")
                    </td>
                    <td>
                        @{
                            double a = 0, b = 0, c = 0;

                            if (item.Payrollsaved.TotalOT != null && payrolesController.IsBase64Encoded(item.Payrollsaved.TotalOT))
                            {
                                double.TryParse(payrolesController.Unprotect(item.Payrollsaved.TotalOT), out a);
                            }
                            if (item.Payrollsaved.Arrears != null && payrolesController.IsBase64Encoded(item.Payrollsaved.Arrears))
                            {
                                double.TryParse(payrolesController.Unprotect(item.Payrollsaved.Arrears), out b);
                            }
                            if (item.Payrollsaved.TicketAllowance_ != null && payrolesController.IsBase64Encoded(item.Payrollsaved.TicketAllowance_))
                            {
                                double.TryParse(payrolesController.Unprotect(item.Payrollsaved.TicketAllowance_), out c);
                            }
                            var sum = a + b + c;
                            @sum.ToString("F")
                            total1 += sum;
                        }
                    </td>
                    <td>
                        @{
                            int.TryParse(payrolesController.Unprotect(item.Payrollsaved.NetPay), out var d);
                            total2 += d;
                        }
                        @d.ToString("F")
                    </td>
                </tr>
            }
        @if (!molno.IsNullOrWhiteSpace() && molno.Contains("NON WPS")){
            foreach (var item in Model.Where(x => x.LabourCard != null && x.LabourCard.establishment == molno && !x.LabourCard.establishment.Contains("NON WPS")))
            {
                <tr>
                    @{
                        srno++;
                    }
                    <td>@srno</td>
                    @if (item.MasterFile != null)
                    {
                        <td>@item.MasterFile.employee_name</td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (item.passportoremiratesid.IsNullOrWhiteSpace())
                    {
                        <td>@item.passportoremiratesid</td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (item.BankDetails != null)
                    {
                        <td>@item.BankDetails.bank_name</td>
                        <td>@item.BankDetails.IBAN</td>
                    }
                    else
                    {
                        <td></td>
                        <td></td>
                    }
                    <td>
                        @{
                            int.TryParse(payrolesController.Unprotect(item.Payrollsaved.NetPay), out var d);
                            total2 += d;
                        }
                        @d.ToString("F")
                    </td>
                    <td></td>
                </tr>
            }

        }
            @if (molno.IsNullOrWhiteSpace())
            {
                foreach (var item in Model.Where(x => x.LabourCard == null))
                {
                    <tr>
                        @{
                            srno++;
                        }
                        <td>@srno</td>
                        @if (item.MasterFile != null)
                        {
                            <td>@item.MasterFile.employee_name</td>
                        }
                        else
                        {
                            <td></td>
                        }
                        @if (item.LabourCard != null)
                        {
                            <td>@item.LabourCard.work_permit_no</td>
                            <td>@item.LabourCard.personal_no</td>
                        }
                        else
                        {
                            <td></td>
                            <td></td>
                        }
                        @if (item.BankDetails != null)
                        {
                            <td>@item.BankDetails.bank_name</td>
                            <td>@item.BankDetails.IBAN</td>
                        }
                        else
                        {
                            <td></td>
                            <td></td>
                        }
                        <td>@item.Payrollsaved.Absents</td>
                        <td>
                            @{
                                int.TryParse(payrolesController.Unprotect(item.Payrollsaved.Gross), out var e);
                                total += e;
                            }
                            @e.ToString("F")
                        </td>
                        <td>
                            @{
                                double a = 0, b = 0, c = 0;

                                if (item.Payrollsaved.TotalOT != null && payrolesController.IsBase64Encoded(item.Payrollsaved.TotalOT))
                                {
                                    double.TryParse(payrolesController.Unprotect(item.Payrollsaved.TotalOT), out a);
                                }
                                if (item.Payrollsaved.Arrears != null && payrolesController.IsBase64Encoded(item.Payrollsaved.Arrears))
                                {
                                    double.TryParse(payrolesController.Unprotect(item.Payrollsaved.Arrears), out b);
                                }
                                if (item.Payrollsaved.TicketAllowance_ != null && payrolesController.IsBase64Encoded(item.Payrollsaved.TicketAllowance_))
                                {
                                    double.TryParse(payrolesController.Unprotect(item.Payrollsaved.TicketAllowance_), out c);
                                }
                                var sum = a + b + c;
                                @sum.ToString("F")
                                total1 += sum;
                            }
                        </td>
                        <td>
                            @{
                                int.TryParse(payrolesController.Unprotect(item.Payrollsaved.NetPay), out var d);
                                total2 += d;
                            }
                            @d.ToString("F")
                        </td>
                    </tr>
                }
            }
            <tr>
                <td colspan="7">total in dirhms</td>
                <td>@total</td>
                <td>@total1</td>
                <td>@total2</td>
            </tr>
        </table>
    </div>
    i++;
    end:
    ;
}
<script>

    function print() {
        var t =  @i -1;
        for (let j = 0; j < t; j++) {
            text = ".page" + j;
            getPDF(text, j+1);
        }
    }
</script>