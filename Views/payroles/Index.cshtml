@using HRworks.Controllers
@model IEnumerable<HRworks.Models.payrole>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>payroll</h2>

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script>
    $(function() {
        $("#datepicker").datepicker();
    });
</script>
@using (Html.BeginForm("Index", "payroles", FormMethod.Get, new { id = "form1" }))
{
    <div>
        month:-
        <input type="text" name="month" id="datepicker" class="form-control" value="@if(ViewBag.payday != null){@ViewBag.payday.ToString("d")}"/>
        <input type="submit"
               name="submit"
               value="Get records" ondblclick="norc()" class="btn btn-default"/>

        <input type="button" class="btn btn-default" onclick="window.location.href = '@Url.Action("Report", "Attendances")'" value="back to main"/>
    </div>
}
<table class="table">
<tr>
    <th>
        @Html.DisplayNameFor(model => model.master_file.employee_no)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.master_file.employee_name)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.contract.basic)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.contract.salary_details)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.contract.ticket_allowance)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.contract.arrears)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.totalpayable)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.OTRegular) (amt)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.OTRegular) (hrs)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.OTFriday) (amt)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.OTFriday) (hrs)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.OTNight)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.HolidayOT) (amt)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.HolidayOT) (hrs)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.Fot)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.TotalOT)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.cashAdvances)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.HouseAllow)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.contract.transportation_allowance)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.FoodAllow)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.Timekeeping)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.Communication)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.TrafficFines)
    </th>
    <th>
        absence(days)
    </th>
    <th>
        LWOP(days)
    </th>
    <th>total LWOP</th>
    <th>
        @Html.DisplayNameFor(model => model.others)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.TotalDedution)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.NetPay)
    </th>
    <th>
        @Html.DisplayNameFor(model => model.remarks)
    </th>
    <th></th>
</tr>

@foreach (var item in Model)
{
    <tr>
    <td>
        @Html.DisplayFor(modelItem => item.master_file.employee_no)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.master_file.employee_name)
    </td>
    <td>
        @{
            var bas = payrolesController.Unprotect(item.contract.basic);
            double.TryParse(bas, out var bas1);
            var basperh = ((bas1 * 12) / 365) / 8;

        }
        @bas1.ToString("#,##0.00")
    </td>
    <td>
        @{
            var sal = payrolesController.Unprotect(item.contract.salary_details);
            double.TryParse(sal, out var sal1);
        }
        @sal1.ToString("#,##0.00")
    </td>
    <td>
        @{
            var tic = 0d;
            if (item.TicketAllowance_ != null && !item.TicketAllowance_.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.TicketAllowance_), out tic);
            }

        }
        @tic.ToString("#,##0.00")
    </td>
    <td>
        @{
            var arr = 0d;
            if (item.Arrears != null && !item.Arrears.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.Arrears), out arr);
            }

        }
        @arr.ToString("#,##0.00")
    </td>
    <td>
        @{
            var ttp = payrolesController.Unprotect(item.totalpayable);
            double.TryParse(ttp, out var ttp1);
        }
        @ttp1.ToString("#,##0.00")
    </td>
    <td>
        @{
            double.TryParse(payrolesController.Unprotect(item.OTRegular), out var a);
            var adays = a;
            a = a * 1.25 * basperh;
        }
        @a.ToString("#,##0.00")
    </td>
    <td>
        @adays
    </td>
    <td>
        @{
            double.TryParse(payrolesController.Unprotect(item.OTFriday), out var c);
            var cdays = c;
            c = c * 1.5 * basperh;
        }
        @c.ToString("#,##0.00")
    </td>
    <td>
        @cdays
    </td>
    <td>
        @{
            var d = 0d;
            if (item.OTNight != null && item.OTNight.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.OTNight), out d);
            }

        }
        @d.ToString("#,##0.00")
    </td>
    <td>
        @{
            double.TryParse(payrolesController.Unprotect(item.HolidayOT), out var b);
            var bdays = b;
            b = b * 2.5 * basperh;
        }
        @b.ToString("#,##0.00")
    </td>
    <td>
        @bdays
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Fot)
        @{
            double.TryParse(payrolesController.Unprotect(item.contract.FOT), out var e);
        }
        @e.ToString("#,##0.00")
    </td>
    <td>
        @{
            var tot = a + b + c + d + e;
        }
        @tot.ToString("#,##0.00")
    </td>
    <td>
        @{
            var ca = 0d;
            if (item.cashAdvances != null && !item.cashAdvances.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.cashAdvances), out ca);
            }

        }
        @ca.ToString("#,##0.00")
    </td>
    <td>
        @{
            var ha = 0d;
            if (item.HouseAllow != null && !item.HouseAllow.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.HouseAllow), out ha);
            }

        }
        @ha.ToString("#,##0.00")
    </td>
    <td>
        @{
            var tra = 0d;
            if (item.TransportationAllowance_ != null && !item.TransportationAllowance_.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.TransportationAllowance_), out tra);
            }

        }
        @tra.ToString("#,##0.00")
    </td>
    <td>
        @{
            var fa = 0d;
            if (item.FoodAllow != null && !item.FoodAllow.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.FoodAllow), out fa);
            }

        }
        @fa.ToString("#,##0.00")
    </td>
    <td>
        @{
            var tk = 0d;
            if (item.Timekeeping != null && !item.Timekeeping.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.Timekeeping), out tk);
            }

        }
        @tk.ToString("#,##0.00")
    </td>
    <td>
        @{
            var con = 0d;
            if (item.Communication != null && !item.Communication.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.Communication), out con);
            }

        }
        @con.ToString("#,##0.00")
    </td>
    <td>
        @{
            var traf = 0d;
            if (item.TrafficFines != null && !item.TrafficFines.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.TrafficFines), out traf);
            }

        }
        @traf.ToString("#,##0.00")
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.leave_absence.absence)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Leave.days)
    </td>
    <td>
        @{
            var labs = 0d;
            var ldays = 0d;
            double.TryParse(sal, out var gross);
            if (item.leave_absence != null)
            {
                labs = item.leave_absence.absence.Value;
            }

            if (item.Leave != null)
            {
                ldays = item.Leave.days.Value;
            }

            var TLWOP = (labs + ldays) * (gross * 12 / 365);
        }
        @TLWOP.ToString("#,##0.00")

    </td>
    <td>
        @{
            var oth = 0d;
            if (item.others != null)
            {
                double.TryParse(payrolesController.Unprotect(item.others), out oth);
            }

            @oth.ToString("#,##0.00")
        }
    </td>
    <td>
        @{
            var tod = 0d;
            if (item.TotalDedution != null)
            {
                double.TryParse(payrolesController.Unprotect(item.TotalDedution), out tod);
            }

        }
        @tod.ToString("#,##0.00")
    </td>
    <td>
        @{
            var net = 0d;
            if (item.NetPay != null && !item.NetPay.Contains(" "))
            {
                double.TryParse(payrolesController.Unprotect(item.NetPay), out net);
            }

        }
        @net.ToString("#,##0.00")
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.remarks)
    </td>
    <td>
        @if (item.Id != 0)
        {
            @Html.ActionLink("Edit", "Edit", new { id = item.Id })
        }
    </td>
    </tr>
}

</table>
