@using HRworks.Controllers
@using OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime
@model HRworks.Models.paysavedlist

@{
    ViewBag.Title = "Index";
    var newdate = ViewBag.payday;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>payroll</h2>

<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script>
    $(function() {
        $("#datepicker").datepicker();
    });
</script>
<style>
    b {
        font-weight: 900;
    }
</style>
@using (Html.BeginForm("payroll", "payroles", FormMethod.Get, new { id = "form1" }))
{
    <div>
        month:-
        <input type="text" name="month" id="datepicker" class="form-control" value="@if(ViewBag.payday != null){@ViewBag.payday.ToString("d")}" />

        <input type="submit"
               name="submit"
               value="Get records" ondblclick="norc()" class="btn btn-default" />
        @if (ViewBag.payday != null)
        {
            <input type="button" class="btn btn-default" onclick="window.location.href = '@Url.Action("DownloadExcel", new{month =ViewBag.payday})'" value="Download Excel" />
            if (!Model.Payrollsaved.Any() && Model.Payroll.Count() != 0)
            {
                <input type="button" class="btn btn-default" onclick="window.location.href = '@Url.Action("payroll", "payroles",new{month = @ViewBag.payday,refresh = "C"})'" value="Recalculate" />
            }

        }
        <input type="button" class="btn btn-default" onclick="window.location.href = '@Url.Action("Report", "Attendances")'" value="Back to main" />
        @if (ViewBag.payday != null && User.IsInRole("super_admin") && Model.Payroll.Count() != 0)
        {
            <input type="button" class="btn btn-default" onclick="window.location.href = '@Url.Action("payroll", "payroles", new {month = @ViewBag.payday, save = "save"})'" value="Save" />
        }
        @if (ViewBag.payday != null && Model.Payrollsaved.Count() != 0)
        {
            <input type="button" class="btn btn-default" onclick="window.location.href = '@Url.Action("wpsprint", "payroles", new {month = newdate})'" value="wps" />
            <input type="button" class="btn btn-default" onclick="window.location.href = '@Url.Action("reconsilation", "payroles", new {month = newdate})'" value="reconsilation" />
        }
    </div>
}
<table class="table">
    <tr style="font-size: 12px">
        <th style=" position: sticky;top: 0; width: 48px;"></th>
        <th style=" position: sticky;top: 0; width: 82px;">
            ID
        </th>
        <th style=" position: sticky;top: 0; width: 82px;">
            Name
        </th>
        <th style=" position: sticky;top: 0; width: 65px;">
            Basic
        </th>
        <th style=" position: sticky;top: 0; width: 66px;">
            Gross
        </th>
        <th style=" position: sticky;top: 0; width: 64px;">
            Ticket.A
        </th>
        <th style=" position: sticky;top: 0; width: 58px;">
            Arrears
        </th>
        <th style=" position: sticky;top: 0; width: 51px;">
            Food.A
        </th>
        <th style=" position: sticky;top: 0; width: 65px;">
            <b style="color: #006400">
                Total.PB
            </b>
        </th>
        <th style=" position: sticky;top: 0; width: 51px;">
            OTR AMT
        </th>
        <th style=" position: sticky;top: 0; width: 51px;">
            OTR Hrs
        </th>
        <th style=" position: sticky;top: 0; width: 51px;">
            OTW AMT
        </th>
        <th style=" position: sticky;top: 0; width: 51px;">
            OTW days
        </th>
        <th style=" position: sticky;top: 0; width: 51px;">
            OTN
        </th>
        <th style=" position: sticky;top: 0; width: 51px;">
            OTH AMT
        </th>
        <th style=" position: sticky;top: 0; width: 51px;">
            OTH days
        </th>
        <th style=" position: sticky;top: 0; width: 55px;">
            <b style="color: #006400">	TotalOT</b>
        </th>
        <th style=" position: sticky;top: 0; width: 55px;">
            Cash.A
        </th>
        <th style=" position: sticky;top: 0; width: 59px;">
            House.A
        </th>
        <th style=" position: sticky;top: 0; width: 54px;">
            Trans.A
        </th>
        <th style=" position: sticky;top: 0; width: 78px;">
            Timekeeping
        </th>
        <th style=" position: sticky;top: 0; width: 94px;">
            Communication
        </th>
        <th style=" position: sticky;top: 0; width: 59px;">
            Traffic.F
        </th>
        <th style=" position: sticky;top: 0; width: 53px;">
            Absent
        </th>
        <th style=" position: sticky;top: 0; width: 46px;">
            LWOP
        </th>
        <th style=" position: sticky;top: 0; width: 54px;"><b>total LWOP</b></th>
        <th style=" position: sticky;top: 0; width: 51px;">
            Others
        </th>
        <th style=" position: sticky;top: 0; width: 67px;">
            pension
        </th>
        <th style=" position: sticky;top: 0; width: 89px;">
            <b style="color: #e64f4f">Total Deduction</b>
        </th>
        <th style=" position: sticky;top: 0; width: 75px;">
            <b>NetPay</b>
        </th>
        <th style=" position: sticky;top: 0; width: 67px;">
            Remarks
        </th>
        @*
            <th style=" position: sticky;top: 0; width: 67px;">
                deduction/addition
            </th>*@
    </tr>

    @foreach (var item in Model.Payroll)
    {
        <tr style="font-size: 11px">
            <td>
                @if (item.Id != 0)
                {
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id })
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.master_file.employee_no)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.master_file.employee_name)
            </td>
            <td>
                @{
                    var bas = payrolesController.Unprotect(item.contract.basic);
                    double.TryParse(bas, out var bas1);
                    var basperh = ((bas1 * 12) / 365) / 8;
                    var basperd = ((bas1 * 12) / 365) ;

                }
                @bas1.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var sal = payrolesController.Unprotect(item.contract.salary_details);
                    double.TryParse(sal, out var sal1);
                }
                @sal1.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var tic = 0d;
                    if (string.IsNullOrEmpty(item.TicketAllowance_) && payrolesController.IsBase64Encoded(item.TicketAllowance_))
                    {
                        double.TryParse(payrolesController.Unprotect(item.TicketAllowance_), out tic);
                    }

                }
                @tic.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var arr = 0d;
                    if (string.IsNullOrEmpty(item.Arrears) && payrolesController.IsBase64Encoded(item.Arrears))
                    {
                        double.TryParse(payrolesController.Unprotect(item.Arrears), out arr);
                    }

                }
                @arr.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var fa = 0d;
                    if (string.IsNullOrEmpty(item.FoodAllow) && payrolesController.IsBase64Encoded(item.FoodAllow))
                    {
                        double.TryParse(payrolesController.Unprotect(item.FoodAllow), out fa);
                    }

                }
                @fa.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var ttp = payrolesController.Unprotect(item.totalpayable);
                    double.TryParse(ttp, out var ttp1);
                }
                @ttp1.ToString("#,##0.00")
            </td>
            <td>
                @{
                    double.TryParse(payrolesController.Unprotect(item.OTRegular), out var a);
                    var adays = a;
                    a = a * 1.25 * basperh;
                }
                @a.ToString("#,##0.00")
            </td>
            <td>
                @adays
            </td>
            <td>
                @{
                    double.TryParse(payrolesController.Unprotect(item.OTFriday), out var c);
                    var cdays = c;
                    c = c * 0.5 * basperd;
                }
                @c.ToString("#,##0.00")
            </td>
            <td>
                @cdays
            </td>
            <td>
                @{
                    var d = 0d;
                    if (string.IsNullOrEmpty(item.OTNight) && payrolesController.IsBase64Encoded(item.OTNight))
                    {
                        double.TryParse(payrolesController.Unprotect(item.OTNight), out d);
                    }

                }
                @d.ToString("#,##0.00")
            </td>
            <td>
                @{
                    double.TryParse(payrolesController.Unprotect(item.HolidayOT), out var b);
                    var bdays = b;
                    b = b * 0.5 * basperd;
                }
                @b.ToString("#,##0.00")
            </td>
            <td>
                @bdays
            </td>
            @{
                var labs = 0d;
                var ldays = 0d;
                double.TryParse(sal, out var gross);
                if (item.leave_absence != null)
                {
                    labs = item.leave_absence.absence.Value;
                }

                if (item.Leave != null)
                {
                    if (item.Leave.days != null)
                    {
                        ldays = item.Leave.days.Value;
                    }
                }

                double.TryParse(item.Fot, out var e);
            }
            @*<td>
                    @e.ToString("#,##0.00")
                </td>*@
            <td>
                @{
                    var tot = a + b + c + d + e;
                }
                @tot.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var ca = 0d;
                    if (string.IsNullOrEmpty(item.cashAdvances) && payrolesController.IsBase64Encoded(item.cashAdvances))
                    {
                        double.TryParse(payrolesController.Unprotect(item.cashAdvances), out ca);
                    }

                }
                @ca.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var ha = 0d;
                    if (string.IsNullOrEmpty(item.HouseAllow) && payrolesController.IsBase64Encoded(item.HouseAllow))
                    {
                        double.TryParse(payrolesController.Unprotect(item.HouseAllow), out ha);
                    }

                }
                @ha.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var tra = 0d;
                    if (string.IsNullOrEmpty(item.TransportationAllowance_) && payrolesController.IsBase64Encoded(item.TransportationAllowance_))
                    {
                        double.TryParse(payrolesController.Unprotect(item.TransportationAllowance_), out tra);
                    }

                }
                @tra.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var tk = 0d;
                    if (string.IsNullOrEmpty(item.Timekeeping) && payrolesController.IsBase64Encoded(item.Timekeeping))
                    {
                        double.TryParse(payrolesController.Unprotect(item.Timekeeping), out tk);
                    }

                }
                @tk.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var con = 0d;
                    if (string.IsNullOrEmpty(item.Communication) && payrolesController.IsBase64Encoded(item.Communication))
                    {
                        double.TryParse(payrolesController.Unprotect(item.Communication), out con);
                    }

                }
                @con.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var traf = 0d;
                    if (string.IsNullOrEmpty(item.TrafficFines) && payrolesController.IsBase64Encoded(item.TrafficFines))
                    {
                        double.TryParse(payrolesController.Unprotect(item.TrafficFines), out traf);
                    }

                }
                @traf.ToString("#,##0.00")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.leave_absence.absence)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Leave.days)
            </td>
            <td>
                @{
                    var TLWOP = (labs + ldays) * (gross * 12 / 365);
                }
                @TLWOP.ToString("#,##0.00")

            </td>
            <td>
                @{
                    var oth = 0d;
                    if (item.others != null && payrolesController.IsBase64Encoded(item.others))
                    {
                        double.TryParse(payrolesController.Unprotect(item.others), out oth);
                    }

                    @oth.ToString("#,##0.00")
                }
            </td>
            <td>
                @{
                    var amt = 0d;
                    if (string.IsNullOrEmpty(item.NetPay) && payrolesController.IsBase64Encoded(item.amount))
                    {
                        double.TryParse(payrolesController.Unprotect(item.amount), out amt);
                    }
                }
                @amt.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var tod = 0d;
                    if (item.TotalDedution != null)
                    {
                        double.TryParse(payrolesController.Unprotect(item.TotalDedution), out tod);
                    }

                }
                @tod.ToString("#,##0.00")
            </td>

            <td>
                @{
                    var net = 0d;
                    if (item.NetPay != null && payrolesController.IsBase64Encoded(item.NetPay))
                    {
                        double.TryParse(payrolesController.Unprotect(item.NetPay), out net);
                    }
                }
                @net.ToString("#,##0.00")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.remarks)
            </td> @*
                <td>
                    @Html.DisplayFor(modelItem => item.ded_add)
                </td>*@
        </tr>
    }

    @foreach (var item in Model.Payrollsaved)
    {
        newdate = item.forthemonth.Value;
        <tr style="font-size: 11px">
            <td>
                @Html.DisplayFor(modelItem => item.employee_no)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.employee_name)
            </td>
            <td>
                @{
                    var bas = payrolesController.Unprotect(item.Basic);
                    double.TryParse(bas, out var bas1);
                    var basperh = ((bas1 * 12) / 365) / 8;

                }
                @bas1.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var sal = payrolesController.Unprotect(item.Gross);
                    double.TryParse(sal, out var sal1);
                }
                @sal1.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var tic = 0d;
                    if (string.IsNullOrEmpty(item.TicketAllowance_) && payrolesController.IsBase64Encoded(item.TicketAllowance_))
                    {
                        double.TryParse(payrolesController.Unprotect(item.TicketAllowance_), out tic);
                    }

                }
                @tic.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var arr = 0d;
                    if (string.IsNullOrEmpty(item.Arrears) && payrolesController.IsBase64Encoded(item.Arrears))
                    {
                        double.TryParse(payrolesController.Unprotect(item.Arrears), out arr);
                    }

                }
                @arr.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var fa = 0d;
                    if (string.IsNullOrEmpty(item.FoodAllow) && payrolesController.IsBase64Encoded(item.FoodAllow))
                    {
                        double.TryParse(payrolesController.Unprotect(item.FoodAllow), out fa);
                    }

                }
                @fa.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var ttp = payrolesController.Unprotect(item.totalpayable);
                    double.TryParse(ttp, out var ttp1);
                }
                @ttp1.ToString("#,##0.00")
            </td>
            <td>
                @{
                    double.TryParse(payrolesController.Unprotect(item.OTRegular), out var a);
                    var adays = a;
                    a = a * 1.25 * basperh;
                }
                @a.ToString("#,##0.00")
            </td>
            <td>
                @adays
            </td>
            <td>
                @{
                    double.TryParse(payrolesController.Unprotect(item.OTFriday), out var c);
                    var cdays = c;
                    c = c * 1.5 * basperh;
                }
                @c.ToString("#,##0.00")
            </td>
            <td>
                @cdays
            </td>
            <td>
                @{
                    var d = 0d;
                    if (string.IsNullOrEmpty(item.OTNight) && payrolesController.IsBase64Encoded(item.OTNight))
                    {
                        double.TryParse(payrolesController.Unprotect(item.OTNight), out d);
                    }

                }
                @d.ToString("#,##0.00")
            </td>
            <td>
                @{
                    double.TryParse(payrolesController.Unprotect(item.HolidayOT), out var b);
                    var bdays = b;
                    b = b * 2.5 * basperh;
                }
                @b.ToString("#,##0.00")
            </td>
            <td>
                @bdays
            </td>
            @{
                var labs = 0d;
                var ldays = 0d;
                double.TryParse(sal, out var gross);
                if (item.Absents != null)
                {
                    labs = (double)item.Absents;
                }

                if (item.LWOP != null)
                {
                    ldays = (double)item.LWOP;
                }

                double.TryParse("0", out var e);
            }
            @*<td>
                    @e.ToString("#,##0.00")
                </td>*@
            <td>
                @{
                    var tot = a + b + c + d + e;
                }
                @tot.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var ca = 0d;
                    if (string.IsNullOrEmpty(item.cashAdvances) && payrolesController.IsBase64Encoded(item.cashAdvances))
                    {
                        double.TryParse(payrolesController.Unprotect(item.cashAdvances), out ca);
                    }

                }
                @ca.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var ha = 0d; 
                    if (string.IsNullOrEmpty(item.HouseAllow) && payrolesController.IsBase64Encoded(item.HouseAllow))
                    {
                        double.TryParse(payrolesController.Unprotect(item.HouseAllow), out ha);
                    }

                }
                @ha.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var tra = 0d;
                    if (string.IsNullOrEmpty(item.TransportationAllowance_) && payrolesController.IsBase64Encoded(item.TransportationAllowance_))
                    {
                        double.TryParse(payrolesController.Unprotect(item.TransportationAllowance_), out tra);
                    }

                }
                @tra.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var tk = 0d;
                    if (string.IsNullOrEmpty(item.Timekeeping) && payrolesController.IsBase64Encoded(item.Timekeeping))
                    {
                        double.TryParse(payrolesController.Unprotect(item.Timekeeping), out tk);
                    }

                }
                @tk.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var con = 0d;
                    if (string.IsNullOrEmpty(item.Communication) && payrolesController.IsBase64Encoded(item.Communication))
                    {
                        double.TryParse(payrolesController.Unprotect(item.Communication), out con);
                    }

                }
                @con.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var traf = 0d;
                    if (string.IsNullOrEmpty(item.TrafficFines) && payrolesController.IsBase64Encoded(item.TrafficFines))
                    {
                        double.TryParse(payrolesController.Unprotect(item.TrafficFines), out traf);
                    }

                }
                @traf.ToString("#,##0.00")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Absents)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LWOP)
            </td>
            <td>
                @{
                    var TLWOP = (labs + ldays) * (gross * 12 / 365);
                }
                @TLWOP.ToString("#,##0.00")

            </td>
            <td>
                @{
                    var oth = 0d;
                    if (item.others != null && payrolesController.IsBase64Encoded(item.others))
                    {
                        double.TryParse(payrolesController.Unprotect(item.others), out oth);
                    }

                    @oth.ToString("#,##0.00")
                }
            </td>
            <td>
                @{
                    var amt = 0d;
                    if (item.amount != null && payrolesController.IsBase64Encoded(item.amount))
                    {
                        double.TryParse(payrolesController.Unprotect(item.amount), out amt);
                    }
                }
                @amt.ToString("#,##0.00")
            </td>
            <td>
                @{
                    var tod = 0d;
                    if (item.TotalDedution != null && payrolesController.IsBase64Encoded(item.TotalDedution))
                    {
                        double.TryParse(payrolesController.Unprotect(item.TotalDedution), out tod);
                    }

                }
                @tod.ToString("#,##0.00")
            </td>
            <td></td>
            <td>
                @{
                    var net = 0d;
                    if (item.NetPay != null && payrolesController.IsBase64Encoded(item.NetPay))
                    {
                        double.TryParse(payrolesController.Unprotect(item.NetPay), out net);
                    }
                }
                @net.ToString("#,##0.00")
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.remarks)
            </td>
            @*<td>
                    @Html.DisplayFor(modelItem => item.ded_add)
                </td>*@
            <td></td>
        </tr>
    }
</table>
