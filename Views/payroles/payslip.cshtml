@using HRworks.Controllers
@model HRworks.Models.payrole

@{
    ViewBag.Title = "payslip";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script>
    $(function () {
        $("#datepicker1").datepicker({
            altField: "#alternate",
            altFormat: "MM,yy",
            changeMonth: true,
            changeYear: true,
            showOtherMonths: true,
            selectOtherMonths: true,
            showButtonPanel: true,
            dateFormat: "dd M yy"
        });
        $("#empno").chosen({ no_results_text: "Oops, nothing found!" });
    });

    document.onkeydown = function (e) {

        if (e.ctrlKey && e.keyCode == 'P'.charCodeAt(0)) {
            $('.btn ').hide();
            $(':submit').hide();
            $('#foot').hide();
            $('#empno_chosen').hide();
            $('#datepicker1').hide();
            return true;
        } else {
            $('.btn ').show();
            $(':submit').show();
            $('#foot').show();
            $('#empno_chosen').show();
            $('#datepicker1').show();
        }
        return true;
    }
</script>
<style>
    @@media print {
        @@page {
            size: landscape
        }
    }

    .container {
        position: relative;
        text-align: center;
        color: black;
    }

    /* Bottom left text */
    .bottom-left {
        position: absolute;
        bottom: 8px;
        left: 150px;
    }
    .payslip {
        position: absolute;
        top: 5px;
        left: 2.5cm
    }
    .Employee {
        position: absolute;
        top: 30px;
        left: 3cm
    }
    .DateJoin {
        position: absolute;
        top: 50px;
        left: 2.5cm
    }
    .position {
        position: absolute;
        top: 31px;
        left: 20cm
    }

    .Grade {
        position: absolute;
        top: 46px;
        left: 20cm
    }

    .Project {
        position: absolute;
        top: 6px;
        left: 20cm
    }
    .basic {
        position: absolute;
        top: 109px;
        left: 3cm;
        font-size: 9.5px;
    }
    .food_allowance {
        position: absolute;
        top: 109px;
        left: 7cm;
        font-size: 9.5px;
    }
    .Arrears {
        position: absolute;
        top: 109px;
        left: 10cm;
        font-size: 9.5px;
    }
    .Housing {
        position: absolute;
        top: 129px;
        left: 3cm;
        font-size: 9.5px;
    }
    .FOT {
        position: absolute;
        top: 129px;
        left: 7cm;
        font-size: 9.5px;
    }
    .Ticket {
        position: absolute;
        top: 129px;
        left: 10cm;
        font-size: 9.5px;
    }
    .transportation {
        position: absolute;
        top: 145px;
        left: 3cm;
        font-size: 9.5px;
    }

    .LAllow {
        position: absolute;
        top: 145px;
        left: 7cm;
        font-size: 9.5px;
    }
    .OT {
        position: absolute;
        top: 160px;
        left: 3cm;
        font-size: 9.5px;
    }
    .AnnualLeave {
        position: absolute;
        top: 101px;
        left: 14cm;
        font-size: 9.5px;
    }
    .Absent {
        position: absolute;
        top: 121px;
        left: 14cm;
        font-size: 9.5px;
    }
    .LWOP {
        position: absolute;
        top: 130px;
        left: 14cm;
        font-size: 9.5px;
    }
    .SL {
        position: absolute;
        top: 145px;
        left: 14cm;
        font-size: 9.5px;
    }
    .Holiday {
        position: absolute;
        top: 168px;
        left: 14cm;
        font-size: 9.5px;
    }
    .days {
        position: absolute;
        top: 185px;
        left: 14cm;
        font-size: 9.5px;
    }
    .Absentval {
        position: absolute;
        top: 109px;
        left: 18cm;
        font-size: 9.5px;
    }
    .Gross {
        position: absolute;
        top: 184.4px;
        left: 7cm;
        font-size: 13px;
    }
</style>
@using (Html.BeginForm())
{
    @Html.DropDownList("Employee_id", null, htmlAttributes: new { @class = "form-control", @id = "empno" })
    <br />
    <br />
    <input type="text" id="datepicker1" name="eddate" class="form-control" />
    <br />
    <input type="submit" value="Search" class="btn btn-default" />
}
<br />
<br />
<br />
<br />
@if (ViewBag.Employee_id != null && ViewBag.eddate != null)
{
<div class="container" style="width: 277mm; height: 4.5cm">
    <img src="~/img/payslip-1/payslip.jpg" />
    <div class="payslip">
        <b>
            @if (ViewBag.eddate != null)
            {@ViewBag.eddate.ToString("MMMM yyyy")
        }
        </b>
    </div>
    <div class="Project">: <b>@Html.DisplayFor(modelItem => modelItem.contract.departmant_project) </b></div>
    <div class="Employee"><b>@Html.DisplayFor(model => model.master_file.employee_no) @Html.DisplayFor(modelItem => modelItem.master_file.employee_name)</b></div>
    <div class="position"><b>@Html.DisplayFor(modelItem => modelItem.contract.designation)</b></div>
    <div class="DateJoin"><b>@Html.DisplayFor(modelItem => modelItem.master_file.date_joined)</b></div>
    <div class="Grade"><b>@Html.DisplayFor(modelItem => modelItem.contract.grade)</b></div>
    <div class="basic">
        <b>
            @{
                var a = 0d;
                var basperh = 0d;
                if (Model.contract != null)
                {
                    var bas = payrolesController.Unprotect(Model.contract.basic);
                    double.TryParse(bas, out var bas1);
                    basperh = ((bas1 * 12) / 365) / 8;
                    @bas1.ToString("F")
                }
            }
        </b>
    </div>
    <div class="food_allowance">
        <b>
            @if (Model.contract != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.contract.food_allowance), out a);@a
            }
        </b>
    </div>
    <div class="Arrears">
        <b>
            @if (Model.contract != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.contract.arrears), out a);@a
            }
        </b>
    </div>
    <div class="Housing">
        <b>
            @if (Model.contract != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.contract.housing_allowance), out a);@a
            }
        </b>
    </div>
    <div class="FOT">
        <b>
            @if (Model.contract != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.contract.FOT), out a);@a
            }
            else
            {
                var z = 0;
                @z
            }
        </b>
    </div>
    <div class="Ticket">
        <b>
            @if (Model.TicketAllowance_ != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.TicketAllowance_), out a);@a
            }
            else
            {
                var z = 0;
                @z
            }
        </b>
    </div>
    <div class="transportation">
        <b>
            @if (Model.contract != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.contract.transportation_allowance), out a);@a
            }
            else
            {
                var z = 0;
                @z
            }
        </b>
    </div>
    <div class="LAllow">
        <b>
            @if (Model.contract != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.contract.living_allowance), out a);@a
            }
            else
            {
                var z = 0;
                @z
            }
        </b>
    </div>
    <div class="OT">
        <b>
            @if (Model.contract != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.TotalOT), out var a1);
                @a1
            }
        </b>
    </div>
    <div class="Gross">
        @{
            double.TryParse(payrolesController.Unprotect(Model.TotalOT), out var a2);
            var ttp = payrolesController.Unprotect(Model.totalpayable);
            double.TryParse(ttp, out var a3);
            var gro = a3 + a2;
            @gro
        }
    </div>
    <div class="AnnualLeave"><b>@ViewBag.al</b></div>
    <div class="Absent"><b>@Html.DisplayFor(modelItem => modelItem.leave_absence.absence)</b></div>
    <div class="LWOP"><b>@Html.DisplayFor(modelItem => modelItem.Leave.days)</b></div>
    <div class="SL">
        <b>
            @ViewBag.sl
        </b>
    </div>
    <div class="Holiday">
        <b>
            @ViewBag.holi
        </b>
    </div>
    <div class="days">
        <b>
            @{
                var leave = 0d;
                if (Model.Leave != null)
                {
                    leave = Model.Leave.days.Value;
                }
                var abs = 0d;
                if (Model.Leave != null)
                {
                    abs = Model.leave_absence.absence.Value;
                }
                var daysleft = 31 - leave - abs - ViewBag.al - ViewBag.sl;
            }
            @daysleft
        </b>
    </div>
    <div class="Absentval">
        @{
            var labs = 0d;
            var ldays = 0d;
            var ldaysamt = 0d;
            if (Model.contract != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.contract.salary_details), out var gross);
                if (Model.leave_absence != null)
                {
                    labs = Model.leave_absence.absence.Value;
                }
                if (Model.Leave != null)
                {
                    ldays = Model.Leave.days.Value;
                }
                var absamt = (labs) * (gross * 12 / 365);
                ldaysamt = (ldays) * (gross * 12 / 365);
                @absamt
            }
        }
    </div>
    <div class="Late">
        @{
            if (Model.Timekeeping != null)
            {
                double.TryParse(payrolesController.Unprotect(Model.Timekeeping), out var tk);@tk
            }
            else
            {
                var z = 0;
                @z
            }
        }
    </div>
<div class="traffic">
    @{
        if (Model.TrafficFines != null)
        {
            double.TryParse(payrolesController.Unprotect(Model.TrafficFines), out var tf);@tf
        }
        else
        {
            var z = 0;
            @z
        }
    }
</div>
<div class="LWOPamt">@ldaysamt</div>
<div class="communication">
    @{
        if (Model.Communication != null)
        {
            double.TryParse(payrolesController.Unprotect(Model.Communication), out var co);@co
        }
        else
        {
            var z = 0;
            @z
        }

    }
</div>
<div class="CashAdvanc">
    @{
        if (Model.cashAdvances != null)
        {
            double.TryParse(payrolesController.Unprotect(Model.cashAdvances), out var ca);@ca
        }
        else
        {
            var z = 0;
            @z
        }
    }
</div>
<div class="Adjustments">
    @{
        if (Model.others != null)
        {
            double.TryParse(payrolesController.Unprotect(Model.others), out var ot);@ot
        }
        else
        {
            var z = 0;
            @z
        }
    }
</div>
<div class="TotalDeduction">
    @{
        if (Model.TotalDedution != null)
        {
            double.TryParse(payrolesController.Unprotect(Model.TotalDedution), out var tot);@tot
        }
        else
        {
            var z = 0;
            @z
        }
    }
</div>
<div class="NET">
    <b>
        @{
            double.TryParse(payrolesController.Unprotect(Model.NetPay), out var np);@np
        }
    </b>
</div>
</div>
}
<br />
<br />
<br />
<br />
