@using HRworks.Controllers
@model HRworks.Models.payrole

@{
    ViewBag.Title = "payslip";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script>
    $(function () {
        $("#datepicker1").datepicker({
            altField: "#alternate",
            altFormat: "MM,yy",
            changeMonth: true,
            changeYear: true,
            showOtherMonths: true,
            selectOtherMonths: true,
            showButtonPanel: true,
            dateFormat: "dd M yy"
        });
        $("#empno").chosen({ no_results_text: "Oops, nothing found!" });

    });

    document.onkeydown = function (e) {

        if (e.ctrlKey && e.keyCode == 'P'.charCodeAt(0)) {
            return false;
        } 
        return true;
    }</script>
<script src="~/Scripts/html2canvas/html2canvas.min.js"></script>
<script>
    function print() {
        html2canvas(document.getElementById('Payslip1')).then(function (canvas) {
            var base64image = canvas.toDataURL("image/png");
            var newWindow = window.open(base64image, "_blank");
            newWindow.print();
        });
    }
</script>
<style>
    @@media print {
        @@page {
            size: portrait;
            margin: 0px 0px 0px 0px;
        }
    }

    .container {
        position: relative;
        text-align: center;
        color: black;
        width: 210mm;
        height: 297mm;
        font-size: 10pt !important;
    }

    /* Bottom left text */
    .bottom-left {
        position: absolute;
        bottom: 8px;
        left: 150px;
    }

    .payslip {
        position: absolute;
        top: 215px;
        left: 7cm;
        color: white;
        font-size: 10pt;
        font-weight: 300;
    }

    .Employee {
        position: absolute;
        top: 297px;
        left: 6.9cm;
        font-size: 10pt
    }

    .Employee1 {
        position: absolute;
        top: 277px;
        left: 6.9cm;
        font-size: 10pt
    }

    .DateJoin {
        position: absolute;
        top: 316px;
        left: 16.2cm;
        font-size: 10pt
    }

    .position {
        position: absolute;
        top: 317px;
        left: 6.9cm;
        font-size: 10pt
    }

    .Grade {
        position: absolute;
        top: 278px;
        left: 16.2cm;
        font-size: 10pt
    }

    .Project {
        position: absolute;
        top: 298px;
        left: 16.2cm;
        font-size: 10pt
    }

    .basic {
        position: absolute;
        top: 365px;
        left: 6.9cm;
        font-size: 10pt
    }

    .food_allowance {
        position: absolute;
        left: 16.3cm;
        top: 364px;
        font-size: 10pt
    }

    .Arrears {
        position: absolute;
        top: 422px;
        left: 16.3cm;
        font-size: 10pt
    }

    .Housing {
        position: absolute;
        top: 385px;
        left: 6.9cm;
        font-size: 10pt
    }

    .FOT {
        position: absolute;
        top: 407px;
        left: 16.3cm;
        font-size: 10pt
    }

    .Ticket {
        position: absolute;
        top: 383px;
        left: 16.3cm;
        font-size: 10pt
    }

    .transportation {
        position: absolute;
        top: 405px;
        left: 6.9cm;
        font-size: 10pt
    }

    .LAllow {
        position: absolute;
        top: 425px;
        left: 6.9cm;
        font-size: 10pt
    }

    .OTT {
        position: absolute;
        top: 810px;
        left: 11.8cm;
        font-size: 10pt
    }

    .OTF {
        position: absolute;
        top: 516.5px;
        left: 6.9cm;
        font-size: 10pt
    }

    .OTH {
        position: absolute;
        top: 496.5px;
        left: 6.9cm;
        font-size: 10pt
    }

    .OTR {
        position: absolute;
        top: 476.5px;
        left: 6.9cm;
        font-size: 10pt
    }
    .OTF1 {
        position: absolute;
        top: 516.5px;
        left: 16.3cm;
        font-size: 10pt
    }

    .OTH1 {
        position: absolute;
        top: 496.5px;
        left: 16.3cm;
        font-size: 10pt
    }

    .OTR1 {
        position: absolute;
        top: 476.5px;
        left: 16.3cm;
        font-size: 10pt
    }

    .AnnualLeave {
        position: absolute;
        top: 675px;
        left: 6.9cm;
        font-size: 10pt
    }
    .AnnualLeave1 {
        position: absolute;
        top: 675px;
        left: 8.7cm;
        font-size: 10pt;
    }

    .Absent {
        position: absolute;
        display: none;
        font-size: 10pt; 
    }

    .LWOP {
        position: absolute;
        top: 710px;
        left: 16.2cm;
        font-size: 10pt
    }

    .SL {
        position: absolute;
        top: 695px;
        left: 6.9cm;
        font-size: 10pt
    }

    .mat {
        position: absolute;
        top: 710px;
        left: 6.9cm;
        font-size: 10pt
    }

    .haj {
        position: absolute;
        top: 695px;
        left: 16.2cm;
        font-size: 10pt
    }

    .com {
        position: absolute;
        top: 675px;
        left: 16.2cm;
        font-size: 10pt
    }

    .Holiday {
        position: absolute;
        top: 168px;
        left: 14cm;
        font-size: 10pt;
        display: none
    }

    .days {
        position: absolute;
        top: 185px;
        left: 14cm;
        font-size: 9.5px;
        display: none
    }

    .Absentval {
        position: absolute;
        top: 567px;
        left: 6.9cm;
        font-size: 10pt;
        
    }

    .Late {
        position: absolute;
        top: 586px;
        left: 6.9cm;
        font-size: 10pt;
        
    }

    .LWOPamt {
        position: absolute;
        top: 605px;
        left: 16.3cm;
        font-size: 10pt;
    }

    .CashAdvanc {
        position: absolute;
        top: 586px;
        left: 16.3cm;
        font-size: 10pt;
    }

    .Adjustments {
        position: absolute;
        top: 625px;
        left: 16.3cm;
        font-size: 10pt;
    }

    .communication {
        position: absolute;
        top: 605px;
        left: 6.9cm;
        font-size: 10pt;
        
    }

    .traffic {
        position: absolute;
        top: 567px;
        left: 16.3cm;
        font-size: 10pt;
    }

    .Housing1 {
        position: absolute;
        top: 624px;
        left: 6.9cm;
        font-size: 10pt;
        
    }

    .TotalDeduction {
        position: absolute;
        top: 790px;
        left: 11.8cm;
        font-size: 10pt
    }

    .NET {
        position: absolute;
        top: 790px;
        left: 16.8cm;
    }

    .Gross {
        position: absolute;
        top: 770px;
        left: 11.8cm;
        font-size: 10pt
    }
</style>
@using (Html.BeginForm())
{
    @Html.DropDownList("Employee_id", null, htmlAttributes: new { @class = "form-control", @id = "empno" })
    <br />
    <br />
    <input type="text" id="datepicker1" name="eddate" class="form-control" />
    <br />
    <input type="submit" value="Search" class="btn btn-default" />
    <input type="button" class="btn btn-default" value="print" onclick="print()" />

}
<br />
<br />
<br />
<br />
@if (ViewBag.Employee_id != null && ViewBag.eddate != null)
{
    <div class="container" id="Payslip1">
        <img src="~/img/payslip-1/payslip.jpg" style="width: 100%; height: 100%" />
        <div class="payslip">
            <b>
                Payslip for the month of
                @if (ViewBag.eddate != null)
                {@ViewBag.eddate.ToString("MMMM yyyy")
            }
            </b>
            
        </div>
        <div class="Project">@Html.DisplayFor(modelItem => modelItem.contract.departmant_project) </div>
        <div class="Employee">@Html.DisplayFor(model => model.master_file.employee_no) </div>
        <div class="Employee1">
            
                @{
                    var str = Model.master_file.employee_name;
                    var index = str.IndexOf(' ', str.IndexOf(' ') + 1);
                    var firstChunk = str.Substring(0, index); @firstChunk
                }
            
        </div>
        <div class="position">@Html.DisplayFor(modelItem => modelItem.contract.designation)</div>
        <div class="DateJoin">@Html.DisplayFor(modelItem => modelItem.master_file.date_joined)</div>
        <div class="Grade">@Html.DisplayFor(modelItem => modelItem.contract.grade)</div>
        <div class="basic">
            
                @{
                    var a = 0d;
                    var basperh = 0d;
                    if (Model.contract != null)
                    {
                        var bas = payrolesController.Unprotect(Model.contract.basic);
                        double.TryParse(bas, out var bas1);
                        basperh = ((bas1 * 12) / 365) / 8;
                        @bas1.ToString("#,##0.00")
                    }
                }
            
        </div>
        <div class="food_allowance">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.contract.food_allowance), out a);@a.ToString("#,##0.00")
                }
            
        </div>
        <div class="Arrears">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.contract.arrears), out a);@a.ToString("#,##0.00")
                }
            
        </div>
        <div class="Housing">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.contract.housing_allowance), out a);@a.ToString("#,##0.00")
                }
            
        </div>
        <div class="FOT">
            
            @{
                var leave = 0d;
                if (Model.Leave != null)
                {
                    leave = Model.Leave.days.Value;
                }
                var abs = 0d;
                if (Model.leave_absence != null)
                {
                    abs = Model.leave_absence.absence.Value;
                }
                var ldaysf = leave + abs + ViewBag.al;
                var daysleft = DateTime.DaysInMonth(Model.forthemonth.Value.Year, Model.forthemonth.Value.Month) - leave - abs - ViewBag.al;
            }
            @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.contract.FOT), out a);
                    if (ldaysf != 0)
                    {
                        a = (a * 12 / 365) * (daysleft);
                    }
                    @a.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }
            
        </div>
        <div class="Ticket">
            
                @if (Model.TicketAllowance_ != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.TicketAllowance_), out a);@a.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }
            
        </div>
        <div class="transportation">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.contract.transportation_allowance), out a);@a.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }
            
        </div>
        <div class="LAllow">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.contract.living_allowance), out a);@a.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }
            
        </div>
        <div class="OTT">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.TotalOT), out var a1);
                    @a1.ToString("#,##0.00")
                }
            
        </div>
        <div class="OTR">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.OTRegular), out var a1);
                    @a1
                }
            
        </div>
        <div class="OTF">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.OTFriday), out var a1);
                    @a1
                }
            
        </div>
        <div class="OTH">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.HolidayOT), out var a1);
                    @a1
                }
            
        </div>
        <div class="OTR1">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.OTRegular), out var z);
                    var adays = z;
                    z = z * 1.25 * basperh;@z.ToString("#,##0.00")
                }
            
        </div>
        <div class="OTF1">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.OTFriday), out var c);
                    var cdays = c;
                    c = c * 1.5 * basperh;@c.ToString("#,##0.00")
                }
            
        </div>
        <div class="OTH1">
            
                @if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.HolidayOT), out var b);
                    var bdays = b;
                    b = b * 2.5 * basperh;@b.ToString("#,##0.00")
                }
            
        </div>
        <div class="Gross">
            
                @{
                    double.TryParse(payrolesController.Unprotect(Model.TotalOT), out var a2);
                    var ttp = payrolesController.Unprotect(Model.totalpayable);
                    double.TryParse(ttp, out var a3);
                    var gro = a3 + a2;
                    @gro.ToString("#,##0.00")
                }
            
        </div>
        <div class="AnnualLeave">@ViewBag.al</div><div class="AnnualLeave1">@ViewBag.lbal</div>
        <div class="Absent">@if(Model.leave_absence != null){@Html.DisplayFor(modelItem => modelItem.leave_absence.absence)}
                            else
                            {
                                var z = 0d;@z
                            }</div>
        <div class="LWOP">@if (Model.Leave == null)
                             {
                                 var z = 0d;@z
                             }
                             else
                             {
                                 @Html.DisplayFor(modelItem => modelItem.Leave.days)
                             } </div>
        <div class="SL">
            
                @ViewBag.sl
            
        </div>
        <div class="mat">
            
                @ViewBag.mat
            
        </div>
        <div class="haj">
            
                @ViewBag.haj
            
        </div>
        <div class="com">
            
                @ViewBag.com
            
        </div>
        <div class="Holiday">
            
                @ViewBag.holi
            
        </div>
                                                             <div class="days">
                                                                 @daysleft

                                                             </div>
        <div class="Absentval">
            @{
                var labs = 0d;
                var ldays = 0d;
                var ldaysamt = 0d;
                if (Model.contract != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.contract.salary_details), out var gross);
                    if (Model.leave_absence != null)
                    {
                        labs = Model.leave_absence.absence.Value;
                    }
                    if (Model.Leave != null)
                    {
                        ldays = Model.Leave.days.Value;
                    }
                    var absamt = (labs) * (gross * 12 / 365);
                    ldaysamt = (ldays) * (gross * 12 / 365);
                    @absamt.ToString("#,##0.00")
                }
            }
        </div>
        <div class="Late">
            @{
                if (Model.Timekeeping != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.Timekeeping), out var tk);@tk.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }
            }
        </div>
        <div class="traffic">
            @{
                if (Model.TrafficFines != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.TrafficFines), out var tf);@tf.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }
            }
        </div>
        <div class="Housing1">
            @{
                if (Model.TrafficFines != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.HouseAllow), out var tf);@tf.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }
            }
        </div>
        <div class="LWOPamt">@ldaysamt.ToString("#,##0.00")</div>
        <div class="communication">
            @{
                if (Model.Communication != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.Communication), out var co);@co.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }

            }
        </div>
        <div class="CashAdvanc">
            @{
                if (Model.cashAdvances != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.cashAdvances), out var ca);@ca.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }
            }
        </div>
        <div class="Adjustments">
            @{
                if (Model.others != null)
                {
                    double.TryParse(payrolesController.Unprotect(Model.others), out var ot);@ot.ToString("#,##0.00")
                }
                else
                {
                    var z = 0;
                    @z.ToString("#,##0.00")
                }
            }
        </div>
        <div class="TotalDeduction">
    @{
        if (Model.TotalDedution != null)
        {
            double.TryParse(payrolesController.Unprotect(Model.TotalDedution), out var tot);@tot.ToString("#,##0.00")
        }
        else
        {
            var z = 0;
            @z
        }
    }

        </div>
        <div class="NET">
            
                @{
                    double.TryParse(payrolesController.Unprotect(Model.NetPay), out var np);@np.ToString("AED #,##0.00")
                }
            
        </div>
    </div>

}
<br />
<br />
<br />
<br />
